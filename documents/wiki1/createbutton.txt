abstract factory pattern provides way encapsulate group individual factories common theme without specifying concrete classes normal usage client software creates concrete implementation abstract factory uses generic interface factory create concrete objects part theme client doesn know care concrete objects gets internal factories since uses generic interfaces products pattern separates details implementation set objects general usage relies object composition object creation implemented methods exposed factory interface example would abstract factory class documentcreator provides interfaces create number products e g createletter createresume system would number derived concrete versions documentcreator class like fancydocumentcreator moderndocumentcreator different implementation createletter createresume would create corresponding object like fancyletter modernresume products derived simple abstract class like letter resume client aware client code would get appropriate instance documentcreator call factory methods resulting objects would created documentcreator implementation would share common theme would fancy modern objects client would need know handle abstract letter resume class specific version got concrete factory factory location concrete class code objects constructed intent employing pattern insulate creation objects usage create families related objects without depend concrete classes allows new derived types introduced change code uses base class use pattern makes possible interchange concrete implementations without changing code uses even runtime however employment pattern similar design patterns may result unnecessary complexity extra work initial writing code additionally higher levels separation abstraction result systems difficult debug maintain